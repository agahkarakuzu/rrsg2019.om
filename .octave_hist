display(sos_py_repr(nCh))
_make_figures("/tmp/tmpyvpdu4r2", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpq94yz_54", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nCh))
_make_figures("/tmp/tmpyygf4yof", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpmlo0n772", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpqo62uz5h", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(rawdata))
_make_figures("/tmp/tmp9d_5xqhi", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpu1kkkdnw", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(rawdata))
_make_figures("/tmp/tmpfnn_o6e4", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp97gbalh_", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpe0aln3z3", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nFE))
_make_figures("/tmp/tmp7w1j1dsu", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpzy9c3rnk", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nFE))
_make_figures("/tmp/tmp4flf19qi", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp9r3xt6ne", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp5lnmvjb5", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nSpokes))
_make_figures("/tmp/tmp1x3hrktr", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpbwfmtug5", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nSpokes))
_make_figures("/tmp/tmp_l1_yigu", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpijc1c4ru", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpknxw3wpb", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nCh))
_make_figures("/tmp/tmpc0ewxg7b", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_itg5xax", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nCh))
_make_figures("/tmp/tmpfnj8ez9s", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp1f8asdmm", "png", "Figure", -1, -1, 0, 0)
# First we will parse data on Octave 
# Use bart to obtain root sum of squares of the rawdata over channels
rd = real(rawdata) + 1i*imag(rawdata);
ksp_rss = bart('rss 8', rd);
lg_ksprss = squeeze(log(rd)); clear rd;
trajx = squeeze(trajectory(1,:,:))(:);
trajy = squeeze(trajectory(2,:,:))(:);
_make_figures("/tmp/tmpknb2c3f4", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpv4y9l14c", "png", "Figure", -1, -1, 0, 0)
# First we will parse data on Octave 
# Use bart to obtain root sum of squares of the rawdata over channels
rd = real(rawdata) + 1i*imag(rawdata);
ksp_rss = bart('rss 8', rd);
lg_ksprss = squeeze(log(rd)); clear rd;
trajx = squeeze(trajectory(1,:,:))(:);
trajy = squeeze(trajectory(2,:,:))(:);
size(trajx)
_make_figures("/tmp/tmp5kuni1u8", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmplo6fndyv", "png", "Figure", -1, -1, 0, 0)
# First we will parse data on Octave 
# Use bart to obtain root sum of squares of the rawdata over channels
rd = real(rawdata) + 1i*imag(rawdata);
ksp_rss = bart('rss 8', rd);
lg_ksprss = squeeze(log(rd)); clear rd;
trajx = squeeze(trajectory(1,:,:))(:);
trajy = squeeze(trajectory(2,:,:))(:);
size(trajy)
_make_figures("/tmp/tmpvrj8j63y", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp01qt407f", "png", "Figure", -1, -1, 0, 0)
# First we will parse data on Octave 
# Use bart to obtain root sum of squares of the rawdata over channels
rd = real(rawdata) + 1i*imag(rawdata);
ksp_rss = bart('rss 8', rd);
trajz = squeeze(log(rd)); clear rd;
trajx = squeeze(trajectory(1,:,:))(:);
trajy = squeeze(trajectory(2,:,:))(:);
size(trajz)
_make_figures("/tmp/tmpg1bge9wu", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp1iegqye9", "png", "Figure", -1, -1, 0, 0)
# First we will parse data on Octave 
# Use bart to obtain root sum of squares of the rawdata over channels
rd = real(rawdata) + 1i*imag(rawdata);
rd = bart('rss 8', rd);
trajz = squeeze(log(rd)); clear rd;
trajx = squeeze(trajectory(1,:,:))(:);
trajy = squeeze(trajectory(2,:,:))(:);
size(trajz)
_make_figures("/tmp/tmpll_qkqta", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmptpzpeo2y", "png", "Figure", -1, -1, 0, 0)
# First we will parse data on Octave 
# Use bart to obtain root sum of squares of the rawdata over channels
rd = real(rawdata) + 1i*imag(rawdata);
rd = bart('rss 8', rd);
trajz = squeeze(log(rd))(:); clear rd;
trajx = squeeze(trajectory(1,:,:))(:);
trajy = squeeze(trajectory(2,:,:))(:);
size(trajz)
_make_figures("/tmp/tmpqk8a1dxz", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpey4wfpod", "png", "Figure", -1, -1, 0, 0)
# First we will parse data on Octave 
# Use bart to obtain root sum of squares of the rawdata over channels
rd = real(rawdata) + 1i*imag(rawdata);
rd = bart('rss 8', rd);
trajz = squeeze(log(rd))(:); clear rd;
trajx = squeeze(trajectory(1,:,:))(:);
trajy = squeeze(trajectory(2,:,:))(:);
_make_figures("/tmp/tmpkos43cd7", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp1o8hgof2", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp7fms8p2m", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmp7rt89cdn", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp0uvhmjb5", "png", "Figure", -1, -1, 0, 0)
# Octave 4.2.2, Mon May 06 14:21:10 2019 UTC <agah@9d61c6dc3a10>
PS1('PEXPECT_PROMPT>'); PS2('PEXPECT_PROMPT_')
graphics_toolkit
more off; source ~/.octaverc; cd("/home/agah");PS1('PEXPECT_PROMPT>'); PS2('PEXPECT_PROMPT_')
addpath("/srv/conda/lib/python3.7/site-packages/octave_kernel")
graphics_toolkit('gnuplot')
set(0, 'defaultfigurevisible', 'off');
version
path(path, '/srv/conda/lib/python3.7/site-packages/sos_matlab')
pkg load dataframe
_make_figures("/tmp/tmpae15efgj", "png", "Figure", -1, -1, 0, 0)
pkg load image 
pkg load optim
_make_figures("/tmp/tmpnvb7erra", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp8lk3_kmi", "png", "Figure", -1, -1, 0, 0)
% Mex c files for gridding by Brian Hargreaves and Philip Beatty 
% http://mrsrl.stanford.edu/~brian/gridding/
mex gridlut_mex.c
mex calcdcflut_mex.c
_make_figures("/tmp/tmpuyaqswpv", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpciaritnt", "png", "Figure", -1, -1, 0, 0)
load('/tmp/rrsg_challenge/brain_radial_96proj_12ch.mat');
whos % Show variables in the current scope
_make_figures("/tmp/tmpq8d9yw2b", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpp_0kg05f", "png", "Figure", -1, -1, 0, 0)
rawdata = permute(rawdata,[4,3,2,1]); 
trajectory = permute(trajectory,[3,2,1]);
[~,nFE,nSpokes,nCh] = size(rawdata);
whos
_make_figures("/tmp/tmp4g_6oh0t", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpzi310uje", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp2glpk1mn", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(rawdata))
_make_figures("/tmp/tmpx7c1nji1", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpgpnj14gg", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(rawdata))
_make_figures("/tmp/tmp0er_9c5n", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpht6wf3p0", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpju4aee5f", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nFE))
_make_figures("/tmp/tmpw3le7_cz", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp3zc88f6v", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nFE))
_make_figures("/tmp/tmp5oiqt0ks", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpmvjnhaun", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpndd2ox63", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nSpokes))
_make_figures("/tmp/tmpelnf_l4o", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpksltf42v", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nSpokes))
_make_figures("/tmp/tmp49mi10ug", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpxgr4xy0x", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp8st7cnqv", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nCh))
_make_figures("/tmp/tmpg428p3dl", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpw9u9eu3r", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(nCh))
_make_figures("/tmp/tmpn0_3oijf", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpdfsnyq6m", "png", "Figure", -1, -1, 0, 0)
# First we will parse data on Octave 
# Use bart to obtain root sum of squares of the rawdata over channels
rd = real(rawdata) + 1i*imag(rawdata);
rd = bart('rss 8', rd);
trajz = squeeze(log(rd)); clear rd;
trajx = squeeze(trajectory(1,:,:));
trajy = squeeze(trajectory(2,:,:));
_make_figures("/tmp/tmp29dzzxcw", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpztp3cjn8", "png", "Figure", -1, -1, 0, 0)
size(trajx)
_make_figures("/tmp/tmpp546ffdt", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_iuz4xi5", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmppjo24fw8", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmph6ew1323", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp7qrmonej", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmpauf19byz", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmphcw4n5g0", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp517k0n9b", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmp3_d6i554", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpebvwbbgg", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmpzdt_toqf", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpjqzhxrxk", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpi99vla1m", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmp6bwo9l9m", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpprnyptic", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmp5c9q200y", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp57b49kt0", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmptabi6wua", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmpwqwbf8ev", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmppygzqxhx", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmplai7_gwt", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpf49d8f1n", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpm0_6xk1l", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajz))
_make_figures("/tmp/tmp4n_djzem", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpmiq1kwkl", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajz))
_make_figures("/tmp/tmpkq2pmnkt", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp6j2_nwe5", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpeq2jiza3", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmprhqattfr", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpmtxjvvz6", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmp80t7lp5x", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmplsti8jf_", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpi3k2s8hv", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmpz7g_b96o", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpnxmlast9", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmpz6s1wskp", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpfyxze1rm", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp7g2wkftr", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajz))
_make_figures("/tmp/tmpv4bx91mz", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp9dp_9uyy", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajz))
_make_figures("/tmp/tmpw2xo9weo", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp4d8wogjw", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpa0i8r8hy", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmpsm2zhv94", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpg8vz1923", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmpkvl_dq_k", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp6rvqpn1k", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpuhslexvr", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmppvnnurhz", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpavo4etwj", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmpr9miqand", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpcrosjm0z", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpi2spg5_a", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajz))
_make_figures("/tmp/tmp424wzvun", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpjhxpqb_2", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajz))
_make_figures("/tmp/tmp2k2r6mum", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmps0ikd7ke", "png", "Figure", -1, -1, 0, 0)
# First we will parse data on Octave 
# Use bart to obtain root sum of squares of the rawdata over channels
rd = real(rawdata) + 1i*imag(rawdata);
rd = bart('rss 8', rd);
clr = squeeze(log(rd)); clear rd;
trajx = squeeze(trajectory(1,:,:));
trajy = squeeze(trajectory(2,:,:));
trajz = squeeze(trajectory(3,:,:));
_make_figures("/tmp/tmp_e5dcsse", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp04mts1r7", "png", "Figure", -1, -1, 0, 0)
# First we will parse data on Octave 
# Use bart to obtain root sum of squares of the rawdata over channels
rd = real(rawdata) + 1i*imag(rawdata);
rd = bart('rss 8', rd);
clr = squeeze(log(rd)); clear rd;
trajx = squeeze(trajectory(1,:,:));
trajy = squeeze(trajectory(2,:,:));
trajz = squeeze(trajectory(3,:,:));
_make_figures("/tmp/tmpki369eux", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmprrop95kx", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpnpex07ym", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmpv68geh3c", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpicbwd_oi", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmpomdw04rd", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpup2kba8u", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpqpz6c63h", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmplmxea6zf", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpw8j982ey", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmpxc46m3s8", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpwsza5p5l", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpbgl134c5", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajz))
_make_figures("/tmp/tmpos6p6z49", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpaw974hau", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajz))
_make_figures("/tmp/tmp9_qdo478", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp1uftqo9b", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpfaxo2wbc", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(clr))
_make_figures("/tmp/tmpf0p4renf", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp0ctb9uoh", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(clr))
_make_figures("/tmp/tmphzpp23ls", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpkjhomxlp", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp5fmp9k2h", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmpkp262_sc", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp22sb6v27", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmpur60hs11", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpluy2ujr3", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpe32tmyw3", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmp8arryg0e", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmphemf79gl", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmp9d5yfz_b", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp0chyg87h", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpzxq4751a", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(clr))
_make_figures("/tmp/tmpo_esxsnp", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp55o8oohi", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(clr))
_make_figures("/tmp/tmp5mp9ubyw", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp7tces5ol", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpricf_xs4", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmp4nco2qzc", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpd4bwgejn", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmplgha3m08", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpikhh5hou", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmppui3qgj_", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmpqfxwoj74", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp1_1zooj1", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmpwlv_h3o7", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpn8cud40z", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpuk2uzarp", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(clr))
_make_figures("/tmp/tmp5v3wm5uq", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpds85zknk", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(clr))
_make_figures("/tmp/tmpuo2bw0c4", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpz9yv053i", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp4prbnm_i", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmp7zggnnh8", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpthyeedfa", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmpk3yecwtx", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpst41q0nl", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpbkdl0gc6", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmpb_86w1u8", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp8cpypwh6", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmpyyfpo2gc", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp458v5wpu", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp65c3j_fo", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(clr))
_make_figures("/tmp/tmp2c1gy7vc", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpznismf0u", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(clr))
_make_figures("/tmp/tmpfzpzs7xu", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpu3euz7oz", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp6pz52vfn", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmp0acdoqc6", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpdlnthd21", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmpyw7va8oi", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_0mqmznj", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpzmsoqvy4", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmpozxhdqev", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp25ka73m4", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmp5ym7itdt", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp268ld5l3", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpjzt5mrpg", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(clr))
_make_figures("/tmp/tmp9hcsd8fc", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmptztvzcr0", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(clr))
_make_figures("/tmp/tmpyqori1ro", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmptmgn8dn4", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpcxh6szsu", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmpxc_k_flh", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp7my7ku91", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajx))
_make_figures("/tmp/tmp9g35g55t", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpv_tsfz8i", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpnlcwronu", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmptk60p04u", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpqdj3pkm8", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(trajy))
_make_figures("/tmp/tmpjgft78ai", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpckff0ybe", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp8yhfzcw6", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(clr))
_make_figures("/tmp/tmpww_6camo", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp8ahljhfh", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(clr))
_make_figures("/tmp/tmp28zjtyop", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpnnpn_3xr", "png", "Figure", -1, -1, 0, 0)
% Adjoint NUFFT to interpolate data onto cartesian grid. 
% -d denotes dimension (x:y:z, which is 300X300X1)
% -a denotes adjoint transform
% -i denotes inverse transform
adj = bart('nufft -d300:300:1 -i -l -t',trajectory,rawdata);
% Transform regridded image back to k-space 
% 7 is for bitmasking 
adjk = bart('fft -u 7', adj);
% Estimate coil sensitivities using the k-space center (radius of 20). 
calib = bart('ecalib -m1 -I',adjk);
_make_figures("/tmp/tmpefmnvd10", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpxqyjimso", "png", "Figure", -1, -1, 0, 0)
size(calib)
_make_figures("/tmp/tmp4o8ieefi", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpgjd8pun6", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpkyell4or", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(calib))
_make_figures("/tmp/tmpe3_drs75", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpdujpaa6a", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(calib))
_make_figures("/tmp/tmphw9oja8s", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpxcwwefan", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpnfe599ua", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(calib))
_make_figures("/tmp/tmpy_m0wo1u", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpqbujri9f", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(calib))
_make_figures("/tmp/tmpnegrji_w", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpegdeb1xv", "png", "Figure", -1, -1, 0, 0)
% Use gridded data for SENSE recon --> BART PICS 
bart_SENSE = bart('pics -l2', adjk, calib);
_make_figures("/tmp/tmpawj78lg1", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpztphkrzj", "png", "Figure", -1, -1, 0, 0)
% Use non-cartesian SENSE recon --> BART PICS 
bart_SENSE2 = bart('pics -t',trajectory, rawdata, calib);
_make_figures("/tmp/tmpmco8h_3f", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp5fm_ydqe", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpqqr_rc02", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE))
_make_figures("/tmp/tmpwvly1ai8", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp1y20roo0", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE))
_make_figures("/tmp/tmp8uba6wah", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpnmrwy9t_", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpyydrvi40", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2))
_make_figures("/tmp/tmplbxodsdu", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_9eral_a", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2))
_make_figures("/tmp/tmpfc200a2d", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpjffh3dix", "png", "Figure", -1, -1, 0, 0)
% Please see HelperFunctions folder for subSample.m 
[outRD_x2, outTR_x2] = subSample(rawdata,trajectory,2,nSpokes);
[outRD_x3, outTR_x3] = subSample(rawdata,trajectory,3,nSpokes);
[outRD_x4, outTR_x4] = subSample(rawdata,trajectory,4,nSpokes);
_make_figures("/tmp/tmpld5_nrmy", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpft120rnz", "png", "Figure", -1, -1, 0, 0)
% BART non-cartesian sense outputs 
bart_SENSE2_x2 = bart('pics -t',outTR_x2, outRD_x2, calib);
bart_SENSE2_x3 = bart('pics -t',outTR_x3, outRD_x3, calib);
bart_SENSE2_x4 = bart('pics -t',outTR_x4, outRD_x4, calib);
_make_figures("/tmp/tmpujs0d_9l", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpnfcoskcf", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpa_1gdpm5", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE))
_make_figures("/tmp/tmpkd1st7tn", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpg_ntpmn6", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE))
_make_figures("/tmp/tmpqihm839b", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp3jqyj78x", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp33vxw8zb", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2_x2))
_make_figures("/tmp/tmpdo_0ukqu", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmppi0laju5", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2_x2))
_make_figures("/tmp/tmp4jovgv6j", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp58txnbsx", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpqbtzwmmr", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2_x3))
_make_figures("/tmp/tmpuk9vxknp", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpiccsi0t4", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2_x3))
_make_figures("/tmp/tmpln9wkj1q", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp34qcnoim", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpxvc9zalq", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2_x4))
_make_figures("/tmp/tmpt7r78_zy", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpe49b5c9q", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2_x4))
_make_figures("/tmp/tmpsfzzdp20", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpnzpkc602", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmph3dxlsd_", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE))
_make_figures("/tmp/tmpulj0nhiv", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp9uyvjlfl", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE))
_make_figures("/tmp/tmpi_6eudam", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpuj1hbabd", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp1sall5c2", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2_x2))
_make_figures("/tmp/tmpco17b4l0", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp2g9c346e", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2_x2))
_make_figures("/tmp/tmpsh1ioicn", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp22inr4qp", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp4o_s7d3m", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2_x3))
_make_figures("/tmp/tmpwpw1mu8x", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp6dubwfhn", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2_x3))
_make_figures("/tmp/tmpjx1w8uv3", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpc1jtg6if", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpda18r62a", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2_x4))
_make_figures("/tmp/tmpax_d7naa", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpy751wc2_", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(bart_SENSE2_x4))
_make_figures("/tmp/tmp6i1e1lp0", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmppq86rtta", "png", "Figure", -1, -1, 0, 0)
dcf = calcdcflut(trajectory,300); 
dcf = reshape(dcf,[3 nFE nSpokes]);
_make_figures("/tmp/tmp0acv8_d5", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmps2bbq5c6", "png", "Figure", -1, -1, 0, 0)
# Root sum of square of sensitivities from 12 channels 
I = real(bart('rss 8',calib.*conj(calib)));
_make_figures("/tmp/tmph6rwpqwb", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_4i2_85e", "png", "Figure", -1, -1, 0, 0)
completion_matches("")
whos
_make_figures("/tmp/tmpsjlodkme", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpr88mgq23", "png", "Figure", -1, -1, 0, 0)
# Root sum of square of sensitivities from 12 channels 
I = real(bart('rss 8',calib.*conj(calib)));
_make_figures("/tmp/tmpj_9l38je", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpor8q22ri", "png", "Figure", -1, -1, 0, 0)
function E = opE(inp,S,traj)
% The input arguments: 
%      - inp is the image date with the size of (300,300)
%      - S is the sensitivities from 12 channels (300,300,1,12)
%      - traj is the k-space coordinates
    
tmp = S.*inp; % Multiply intensity corrected images with coil sensitivities
E = bart('nufft',traj,tmp); % Transform back to the non-uniform k-space
end
_make_figures("/tmp/tmpvejzzkm8", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpw6i61lzo", "png", "Figure", -1, -1, 0, 0)
function out = opEH(dcf,inp,S,traj,I)
% dcf is density compensation factor , see 3.2
% input samples respecting the size of the rawdata (1,512,96,12) 
% S is the coil sensitivities 
% traj is the k-space coordinates 
  % Inverse NUFFT to the image domain using Toeplitz embedding
  tmp = bart('nufft -d300:300:1 -i -t',traj,inp.*sqrt(dcf(1,:,:)));
  
  % Get complex conjugate of sensitivity profiles
  Sstar = conj(S(:,:,1,:));
  
  % Root sum of square of the images, scaled by complex conjugate of the sensitivity maps.
  tmp2 = bart('rss 8 ',tmp.*Sstar);
  
  % Intensity correction
  out = tmp2.*I;
end
_make_figures("/tmp/tmpvm225be2", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpa4yh9_jc", "png", "Figure", -1, -1, 0, 0)
function b = cg_solve(a,I,S,dcf,maxstep,trajectory,usrthr)
p = a;
r = a;
b = zeros(300,300);
for ii=1:maxstep
disp(['Iteration -->' num2str(ii)]);
thr = norm(r).^2./norm(b).^2;
disp(thr);
p = p.*I;
E = opE(p,S,trajectory);
q = opEH(dcf,E,S,trajectory,I);
term = abs(dot(r,r))/dot(p,q);
% The following fails 
% term = real(r*ctranspose(r)/ctranspose(p)*q);
b = b + term*p;
rprev = r;
r = r - term*q;
term2 = abs(dot(r,r)/dot(rprev,rprev));
% The following fails 
% term2 = real(r*ctranspose(r)/ctranspose(rprev)*rprev);
p = r + term2*p;
end
end
_make_figures("/tmp/tmpwe5_pzn3", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpiln8b3bf", "png", "Figure", -1, -1, 0, 0)
a = opEH(dcf,rawdata,calib,trajectory,I);
b = cg_solve(a,I,calib,dcf,10,trajectory,0.001);
_make_figures("/tmp/tmpwnnkvh2t", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp2ppors6j", "png", "Figure", -1, -1, 0, 0)
imagesc(b)
_make_figures("/tmp/tmpgcdu9jpf", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpmi5rluvo", "png", "Figure", -1, -1, 0, 0)
imagesc(b.*I);
_make_figures("/tmp/tmphxvqdo1r", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpxdbjyp3r", "png", "Figure", -1, -1, 0, 0)
k_b = fftshift(fft2(b));
k = 0.5 + 1/pi.*atan(100.*((40-abs(-150:149))/40));
yy = repmat(k,[300 1]);
lele= ifft2(ifftshift(k_b.*yy'));
_make_figures("/tmp/tmpbd5cdxp4", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp498_6oie", "png", "Figure", -1, -1, 0, 0)
imshow(abs(lele),[])
_make_figures("/tmp/tmp273iddsr", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpsewl8ph1", "png", "Figure", -1, -1, 0, 0)
size(dcf)
_make_figures("/tmp/tmpy0gf3jog", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpzaaygsmn", "png", "Figure", -1, -1, 0, 0)
function out = opEH(dcf,inp,S,traj,I)
% dcf is density compensation factor , see 3.2
% input samples respecting the size of the rawdata (1,512,96,12) 
% S is the coil sensitivities 
% traj is the k-space coordinates 
  % Inverse NUFFT to the image domain using Toeplitz embedding
  tmp = bart('nufft -d300:300:1 -a -t',traj,inp.*dcf(1,:,:));
  
  % Get complex conjugate of sensitivity profiles
  Sstar = conj(S(:,:,1,:));
  
  % Root sum of square of the images, scaled by complex conjugate of the sensitivity maps.
  tmp2 = bart('rss 8 ',tmp.*Sstar);
  
  % Intensity correction
  out = tmp2./I;
end
_make_figures("/tmp/tmp0bao3bcr", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpaxz6f8e1", "png", "Figure", -1, -1, 0, 0)
function b = cg_solve(a,I,S,dcf,maxstep,trajectory,usrthr)
p = a;
r = a;
b = zeros(300,300);
for ii=1:maxstep
disp(['Iteration -->' num2str(ii)]);
thr = norm(r).^2./norm(b).^2;
disp(thr);
p = p.*I;
E = opE(p,S,trajectory);
q = opEH(dcf,E,S,trajectory,I);
term = abs(dot(r,r))/dot(p,q);
% The following fails 
% term = real(r*ctranspose(r)/ctranspose(p)*q);
b = b + term*p;
rprev = r;
r = r - term*q;
term2 = abs(dot(r,r)/dot(rprev,rprev));
% The following fails 
% term2 = real(r*ctranspose(r)/ctranspose(rprev)*rprev);
p = r + term2*p;
end
end
_make_figures("/tmp/tmpc63ofc8a", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpig3g864m", "png", "Figure", -1, -1, 0, 0)
a = opEH(dcf,rawdata,calib,trajectory,I);
b = cg_solve(a,I,calib,dcf,10,trajectory,0.001);
_make_figures("/tmp/tmpg78owzi0", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp56pfl6d3", "png", "Figure", -1, -1, 0, 0)
function out = opEH(dcf,inp,S,traj,I)
% dcf is density compensation factor , see 3.2
% input samples respecting the size of the rawdata (1,512,96,12) 
% S is the coil sensitivities 
% traj is the k-space coordinates 
  % Inverse NUFFT to the image domain using Toeplitz embedding
  tmp = bart('nufft -d300:300:1 -i -t',traj,inp.*dcf(1,:,:));
  
  % Get complex conjugate of sensitivity profiles
  Sstar = conj(S(:,:,1,:));
  
  % Root sum of square of the images, scaled by complex conjugate of the sensitivity maps.
  tmp2 = bart('rss 8 ',tmp.*Sstar);
  
  % Intensity correction
  out = tmp2./I;
end
_make_figures("/tmp/tmpy853v87l", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmprcbfqifn", "png", "Figure", -1, -1, 0, 0)
% Adjoint NUFFT to interpolate data onto cartesian grid. 
% -d denotes dimension (x:y:z, which is 300X300X1)
% -a denotes adjoint transform
% -i denotes inverse transform
adj = bart('nufft -d300:300:1 -i -l -t',trajectory,rawdata);
% Transform regridded image back to k-space 
% 7 is for bitmasking 
adjk = bart('fft -u 7', adj);
% Estimate coil sensitivities using the k-space center (radius of 20). 
calib = bart('ecalib -d0 -m1 -I',adjk);
_make_figures("/tmp/tmpeuvs_7g8", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpjz6nu_3x", "png", "Figure", -1, -1, 0, 0)
% Adjoint NUFFT to interpolate data onto cartesian grid. 
% -d denotes dimension (x:y:z, which is 300X300X1)
% -a denotes adjoint transform
% -i denotes inverse transform
adj = bart('nufft -d300:300:1 -i -l -t',trajectory,rawdata);
% Transform regridded image back to k-space 
% 7 is for bitmasking 
adjk = bart('fft -u 7', adj);
calib = bart('ecalib -m1 -I',adjk);
_make_figures("/tmp/tmpkmuaqtdh", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpkdefs3w6", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_9e8tb9r", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(calib))
_make_figures("/tmp/tmp6wogisox", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp8mqf907q", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(calib))
_make_figures("/tmp/tmp0gw0ldwk", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp9prvhu67", "png", "Figure", -1, -1, 0, 0)
% Adjoint NUFFT to interpolate data onto cartesian grid. 
% -d denotes dimension (x:y:z, which is 300X300X1)
% -a denotes adjoint transform
% -i denotes inverse transform
adj = bart('nufft -d300:300:1 -i -l -t',trajectory,rawdata);
% Transform regridded image back to k-space 
% 7 is for bitmasking 
adjk = bart('fft -u 7', adj);
calib = bart('ecalib -m1 -I',adjk);
_make_figures("/tmp/tmpimy1zk60", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpq1o8fvkg", "png", "Figure", -1, -1, 0, 0)
# Root sum of square of sensitivities from 12 channels 
I = real(bart('rss 8',calib.*conj(calib)));
_make_figures("/tmp/tmplib3xnt6", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmptchs8wec", "png", "Figure", -1, -1, 0, 0)
function E = opE(inp,S,traj)
% The input arguments: 
%      - inp is the image date with the size of (300,300)
%      - S is the sensitivities from 12 channels (300,300,1,12)
%      - traj is the k-space coordinates
    
tmp = S.*inp; % Multiply intensity corrected images with coil sensitivities
E = bart('nufft',traj,tmp); % Transform back to the non-uniform k-space
end
_make_figures("/tmp/tmpogfrx0az", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpmzkwon97", "png", "Figure", -1, -1, 0, 0)
function out = opEH(dcf,inp,S,traj,I)
% dcf is density compensation factor , see 3.2
% input samples respecting the size of the rawdata (1,512,96,12) 
% S is the coil sensitivities 
% traj is the k-space coordinates 
  % Inverse NUFFT to the image domain using Toeplitz embedding
  tmp = bart('nufft -d300:300:1 -i -t',traj,inp.*dcf(1,:,:));
  
  % Get complex conjugate of sensitivity profiles
  Sstar = conj(S(:,:,1,:));
  
  % Root sum of square of the images, scaled by complex conjugate of the sensitivity maps.
  tmp2 = bart('rss 8 ',tmp.*Sstar);
  
  % Intensity correction
  out = tmp2./I;
end
_make_figures("/tmp/tmpwdy88xr9", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp6d7zz34j", "png", "Figure", -1, -1, 0, 0)
function b = cg_solve(a,I,S,dcf,maxstep,trajectory,usrthr)
p = a;
r = a;
b = zeros(300,300);
for ii=1:maxstep
disp(['Iteration -->' num2str(ii)]);
thr = norm(r).^2./norm(b).^2;
disp(thr);
p = p.*I;
E = opE(p,S,trajectory);
q = opEH(dcf,E,S,trajectory,I);
term = abs(dot(r,r))/dot(p,q);
% The following fails 
% term = real(r*ctranspose(r)/ctranspose(p)*q);
b = b + term*p;
rprev = r;
r = r - term*q;
term2 = abs(dot(r,r)/dot(rprev,rprev));
% The following fails 
% term2 = real(r*ctranspose(r)/ctranspose(rprev)*rprev);
p = r + term2*p;
end
end
_make_figures("/tmp/tmpcy3bpxd_", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpfd6pkg3s", "png", "Figure", -1, -1, 0, 0)
a = opEH(dcf,rawdata,calib,trajectory,I);
b = cg_solve(a,I,calib,dcf,10,trajectory,0.001);
_make_figures("/tmp/tmppcoi59a6", "png", "Figure", -1, -1, 0, 0)
# Octave 4.2.2, Wed May 08 19:07:02 2019 UTC <agah@9d61c6dc3a10>
PS1('PEXPECT_PROMPT>'); PS2('PEXPECT_PROMPT_')
graphics_toolkit
more off; source ~/.octaverc; cd("/home/agah");PS1('PEXPECT_PROMPT>'); PS2('PEXPECT_PROMPT_')
addpath("/srv/conda/lib/python3.7/site-packages/octave_kernel")
graphics_toolkit('gnuplot')
set(0, 'defaultfigurevisible', 'off');
version
# Octave 4.2.2, Wed May 08 19:49:46 2019 UTC <agah@9d61c6dc3a10>
