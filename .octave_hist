  end
  
  Sstar = conj(S(:,:,1,:)); %  Complex conjugate of sensitivity profiles (see Fig. 1)
  
  EH = bart('rss 8 ',tmp.*Sstar); % Images scaled by complex conjugate of sensitivity profiles and SOS combined
  
end
_make_figures("/tmp/tmpxhc82vth", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmprchohy7q", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,10);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmp7gvxt3zr", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpz15rsw88", "png", "Figure", -1, -1, 0, 0)
function EH = opEH(inp,S,traj)
  
  tmp = squeeze((1+1i)*ones(size(S)));
  size(tmp)
  size(traj)
  size(inp)
  size(inp(:,:,:,1))
  for ii=1:12
      tmp(:,:,ii) = bart('nufft -d300:300:1 -a -t',traj,inp(:,:,:,ii)); % NUFFT to image domain (see implementation notes)
  end
  
  Sstar = conj(S(:,:,1,:)); %  Complex conjugate of sensitivity profiles (see Fig. 1)
  
  EH = bart('rss 8 ',tmp.*Sstar); % Images scaled by complex conjugate of sensitivity profiles and SOS combined
  
end
_make_figures("/tmp/tmpl1yutpf0", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmplte4e12p", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,10);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmp2b6v2xx0", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpztzfymgv", "png", "Figure", -1, -1, 0, 0)
function [im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,maxiter)
    size(dcf)
    size(rawdata)
    size(dcf.*rawdata)
    a = I.*opEH(dcf.*rawdata,calib,trajectory);
    [im,deltas] = cg_solve(a,I,calib,dcf,maxiter,trajectory);
    im = opF(im,100,40);
end
_make_figures("/tmp/tmpmauflnmz", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpto9gp306", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,10);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmp4ld8nrmc", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpo_vttg5k", "png", "Figure", -1, -1, 0, 0)
densCor = abs(trajectory(1,:,:) + 1i*trajectory(2,:,:));
densCor = densCor/max(densCor(:));
_make_figures("/tmp/tmpr1ddglw6", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpz7635ccx", "png", "Figure", -1, -1, 0, 0)
densCor = abs(trajectory(1,:,:) + 1i*trajectory(2,:,:));
densCor = densCor/max(densCor(:));
size(densCor)
_make_figures("/tmp/tmpp79gcxvf", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_bbkr_y9", "png", "Figure", -1, -1, 0, 0)
size(dcf)
_make_figures("/tmp/tmp1strtwsi", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp2x4nxybm", "png", "Figure", -1, -1, 0, 0)
#dcf = calcdcflut(trajectory,300); 
#dcf = reshape(dcf,[3 nFE nSpokes]);
dcf = abs(trajectory(1,:,:) + 1i*trajectory(2,:,:));
dcf = densCor/max(densCor(:));
_make_figures("/tmp/tmp8ncpn7zz", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpkwf2r76q", "png", "Figure", -1, -1, 0, 0)
#dcf = calcdcflut(trajectory,300); 
#dcf = reshape(dcf,[3 nFE nSpokes]);
dcf = abs(trajectory(1,:,:) + 1i*trajectory(2,:,:));
dcf = densCor/max(densCor(:));
densCor = repmat(dcf,[1, 1, 1, 12]);
_make_figures("/tmp/tmpw2pdudh4", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmprr3pty87", "png", "Figure", -1, -1, 0, 0)
#dcf = calcdcflut(trajectory,300); 
#dcf = reshape(dcf,[3 nFE nSpokes]);
dcf = abs(trajectory(1,:,:) + 1i*trajectory(2,:,:));
dcf = densCor/max(densCor(:));
densCor = repmat(dcf,[1, 1, 1, 12]);
size(densCor)
_make_figures("/tmp/tmp4kzf60ru", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpv_e475qc", "png", "Figure", -1, -1, 0, 0)
#dcf = calcdcflut(trajectory,300); 
#dcf = reshape(dcf,[3 nFE nSpokes]);
dcf = abs(trajectory(1,:,:) + 1i*trajectory(2,:,:));
dcf = densCor/max(densCor(:));
size(dcf)
densCor = repmat(dcf,[1, 1, 1, 12]);
size(densCor)
_make_figures("/tmp/tmpnuc_3x9n", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp60fetx2_", "png", "Figure", -1, -1, 0, 0)
#dcf = calcdcflut(trajectory,300); 
#dcf = reshape(dcf,[3 nFE nSpokes]);
dcf = abs(trajectory(1,:,:) + 1i*trajectory(2,:,:));
dcf = dcf/max(dcf(:));
_make_figures("/tmp/tmpuqgzudi3", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp6i6vr_xk", "png", "Figure", -1, -1, 0, 0)
#dcf = calcdcflut(trajectory,300); 
#dcf = reshape(dcf,[3 nFE nSpokes]);
dcf = abs(trajectory(1,:,:) + 1i*trajectory(2,:,:));
dcf = dcf/max(dcf(:));
size(dcf)
_make_figures("/tmp/tmp4hlpyntp", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpbfiqve6v", "png", "Figure", -1, -1, 0, 0)
function [im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,maxiter)
    dcf = repmat(dcf,[1,1,1,12]);
    a = I.*opEH(dcf.*rawdata,calib,trajectory);
    [im,deltas] = cg_solve(a,I,calib,dcf,maxiter,trajectory);
    im = opF(im,100,40);
end
_make_figures("/tmp/tmpqzoainlj", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp9bv4qig4", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,10);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmp8zhrjmht", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpro_bmh0f", "png", "Figure", -1, -1, 0, 0)
function E = opE(inp,S,traj)
    tmp = S.*inp; % Multiply the intensity corrected image with coil sensitivities. This will produce one image per channel stored in tmp variable
    E = bart('nufft -a -t',traj,tmp); % Transform back to the non-uniform k-space (see implementation notes for details)
end
_make_figures("/tmp/tmp0dfq42sa", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp3hc1sijh", "png", "Figure", -1, -1, 0, 0)
function EH = opEH(inp,S,traj)
  
  tmp = squeeze((1+1i)*ones(size(S)));
  size(tmp)
  size(traj)
  size(inp)
  size(inp(:,:,:,1))
  #for ii=1:12
      tmp = bart('nufft -d300:300:1 -a -t',traj,inp); % NUFFT to image domain (see implementation notes)
#      tmp(:,:,ii) = bart('nufft -d300:300:1 -a -t',traj,inp(:,:,:,ii)); % NUFFT to image domain (see implementation notes)
  #end
  
  Sstar = conj(S(:,:,1,:)); %  Complex conjugate of sensitivity profiles (see Fig. 1)
  
  EH = bart('rss 8 ',tmp.*Sstar); % Images scaled by complex conjugate of sensitivity profiles and SOS combined
  
end
_make_figures("/tmp/tmpl202cxxk", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpniwi29ug", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,10);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmpdcu4uorj", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpossttxp4", "png", "Figure", -1, -1, 0, 0)
function E = opE(inp,S,traj)
    tmp = S.*inp; % Multiply the intensity corrected image with coil sensitivities. This will produce one image per channel stored in tmp variable
    E = bart('nufft',traj,tmp); % Transform back to the non-uniform k-space (see implementation notes for details)
end
_make_figures("/tmp/tmp1fhh0el5", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpeavyhkf4", "png", "Figure", -1, -1, 0, 0)
function EH = opEH(inp,S,traj)
  
  tmp = squeeze((1+1i)*ones(size(S)));
  #for ii=1:12
      tmp = bart('nufft -d300:300:1 -a -t',traj,inp); % NUFFT to image domain (see implementation notes)
#      tmp(:,:,ii) = bart('nufft -d300:300:1 -a -t',traj,inp(:,:,:,ii)); % NUFFT to image domain (see implementation notes)
  #end
  
  Sstar = conj(S(:,:,1,:)); %  Complex conjugate of sensitivity profiles (see Fig. 1)
  
  EH = bart('rss 8 ',tmp.*Sstar); % Images scaled by complex conjugate of sensitivity profiles and SOS combined
  
end
_make_figures("/tmp/tmpcp098asf", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpq8uccfgh", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,10);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmpus4sj_jo", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpkzrj68ju", "png", "Figure", -1, -1, 0, 0)
function out = opF(im,beta,r)
    
    ks = 1/sqrt(numel(im))*fftshift(fftn(ifftshift(im)));
    
    dim = size(ks);
    center = (dim + 1)/2;
    [x,y] = meshgrid(-(center(2)-1):(dim(2)-center(2)),-(center(1)-1):(dim(1)-center(1)));
    kRadius = sqrt(x.^2 + y.^2);
    f_k = 0.5 + 1/pi.*atan(beta.*((r-kRadius)/r)); 
    out_ks = abs(ifft2(ifftshift(ks.*f_k)));
    out = sqrt(numel(out_ks))*fftshift(ifftn(ifftshift(out_ks)));
end
_make_figures("/tmp/tmpcy7vvpzo", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpqbb9xa86", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,5);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmprn8fiw6r", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpqsqm2b6l", "png", "Figure", -1, -1, 0, 0)
imagesc(abs(im))
_make_figures("/tmp/tmpqyc0509u", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpcd6o42o3", "png", "Figure", -1, -1, 0, 0)
function [im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,maxiter)
    dcf = repmat(dcf,[1,1,1,12]);
    a = I.*opEH(dcf.*rawdata,calib,trajectory);
    [im,deltas] = cg_solve(a,I,calib,dcf,maxiter,trajectory);
    %im = opF(im,100,40);
end
_make_figures("/tmp/tmpgw8i_vep", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpn_s7py8c", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,3);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmpi41ycdx6", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpz_g9n_my", "png", "Figure", -1, -1, 0, 0)
imagesc(abs(im))
_make_figures("/tmp/tmp0u01mwjd", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpzcojgbfx", "png", "Figure", -1, -1, 0, 0)
function out = opF(im,beta,r)
    
    ks = 1/sqrt(numel(im))*fftshift(fftn(ifftshift(im)));
    
    dim = size(ks);
    center = (dim + 1)/2;
    [x,y] = meshgrid(-(center(2)-1):(dim(2)-center(2)),-(center(1)-1):(dim(1)-center(1)));
    kRadius = sqrt(x.^2 + y.^2);
    f_k = 0.5 + 1/pi.*atan(beta.*((r-kRadius)/r)); 
    out = sqrt(numel(ks.*f_k))*fftshift(ifftn(ifftshift(ks.*f_k)));
end
_make_figures("/tmp/tmpztdjwo1z", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpbc64pre4", "png", "Figure", -1, -1, 0, 0)
imagesc(abs(im))
ima = opF(im,100,40);
_make_figures("/tmp/tmp5s6h2net", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpkitfjkp9", "png", "Figure", -1, -1, 0, 0)
ima = opF(im,100,40);
imagesc(ima)
_make_figures("/tmp/tmp4ruvsj4o", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmphhpxfyqa", "png", "Figure", -1, -1, 0, 0)
ima = opF(im,100,40);
imagesc(abs(ima))
_make_figures("/tmp/tmp0xy5j8fs", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_r17k_z6", "png", "Figure", -1, -1, 0, 0)
ima = opF(im,100,40);
imagesc(abs(im))
_make_figures("/tmp/tmpub29cav6", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmptyaa9__o", "png", "Figure", -1, -1, 0, 0)
ima = opF(im,100,20);
imagesc(abs(im))
_make_figures("/tmp/tmpv3g43sxz", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpmq5gu_ec", "png", "Figure", -1, -1, 0, 0)
ima = opF(im,100,20);
imagesc(abs(ima))
_make_figures("/tmp/tmpb2otnv0f", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpgiyxt8pd", "png", "Figure", -1, -1, 0, 0)
ima = opF(im,100,60);
imagesc(abs(ima))
_make_figures("/tmp/tmp9xovtgmw", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmphb0h9d3d", "png", "Figure", -1, -1, 0, 0)
ima = opF(im,100,70);
imagesc(abs(ima))
_make_figures("/tmp/tmpajaqejv9", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpla9ca7uy", "png", "Figure", -1, -1, 0, 0)
im3 = im.*I;
ima = opF(im,100,70);
imagesc(abs(im3))
_make_figures("/tmp/tmpcc2q5mqa", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpjb1pzj9f", "png", "Figure", -1, -1, 0, 0)
im3 = im./I;
ima = opF(im,100,70);
imagesc(abs(im3))
_make_figures("/tmp/tmp7ypoh7dy", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp4lov28ue", "png", "Figure", -1, -1, 0, 0)
im3 = im./I;
ima = opF(im3,100,70);
imagesc(abs(ima))
_make_figures("/tmp/tmprpkr9_nj", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpiupys5f3", "png", "Figure", -1, -1, 0, 0)
im3 = im./I;
ima = opF(abs(im3),100,70);
imagesc(abs(ima))
_make_figures("/tmp/tmpbq2v1mug", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpnkgd_0uj", "png", "Figure", -1, -1, 0, 0)
imagesc(im)
_make_figures("/tmp/tmp7pnqol35", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpv_fpphjt", "png", "Figure", -1, -1, 0, 0)
imagesc(im./I)
_make_figures("/tmp/tmp01m1352o", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmprlooeh9j", "png", "Figure", -1, -1, 0, 0)
imagesc(im.*I)
_make_figures("/tmp/tmp4mtj1nl_", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmplmf4av3x", "png", "Figure", -1, -1, 0, 0)
imagesc(im./I)
_make_figures("/tmp/tmp68zt2k9o", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpvzuf47tw", "png", "Figure", -1, -1, 0, 0)
im2 = opF(im,100,50);
_make_figures("/tmp/tmpp2953wx9", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpcsu7rnmn", "png", "Figure", -1, -1, 0, 0)
im2 = opF(im,100,50);
imagesc(abs(im2))
_make_figures("/tmp/tmptor6b8m0", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpmf0kwhev", "png", "Figure", -1, -1, 0, 0)
im2 = opF(im,100,60);
imagesc(abs(im2))
_make_figures("/tmp/tmp1ah0abny", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpq3d_thr0", "png", "Figure", -1, -1, 0, 0)
im2 = opF(im,100,60);
imagesc(abs(im2./I))
_make_figures("/tmp/tmpz3ff2m5s", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpaplzskva", "png", "Figure", -1, -1, 0, 0)
im2 = opF(im,100,60);
imagesc(abs(im2)./I)
_make_figures("/tmp/tmpo3ps4a9i", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp2p96r1wm", "png", "Figure", -1, -1, 0, 0)
im2 = opF(im,100,60);
imagesc(abs(im2))
_make_figures("/tmp/tmpgyv7r8z9", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpnb0sp0f9", "png", "Figure", -1, -1, 0, 0)
im2 = opF(im./I,100,60);
imagesc(abs(im2))
_make_figures("/tmp/tmp_54pvqn8", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpadkkbdha", "png", "Figure", -1, -1, 0, 0)
im2 = opF(im,100,60);
imagesc(abs(im2))
_make_figures("/tmp/tmp5xheg0j0", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmppwr6re3h", "png", "Figure", -1, -1, 0, 0)
im2 = opF(im,100,60);
im2 = im2./I;
imagesc(abs(im2))
_make_figures("/tmp/tmpw04v8lsb", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpq8jtkg5f", "png", "Figure", -1, -1, 0, 0)
im2 = opF(im,100,60);
im2 = abs(im2)./I;
imagesc(abs(im2))
_make_figures("/tmp/tmpr6vcljj3", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpr73djww4", "png", "Figure", -1, -1, 0, 0)
im2 = opF(im,100,60);
size(im2)
size(I)
_make_figures("/tmp/tmp9w8q2z17", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpawbq9et_", "png", "Figure", -1, -1, 0, 0)
# Root sum of square of sensitivities (estimated in section 2.1) from 12 channels 
I = abs(bart('rss 8',calib.*calib));
I  = 1/sqrt(I);
_make_figures("/tmp/tmpevkq9et7", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpp0_qb_0i", "png", "Figure", -1, -1, 0, 0)
# Root sum of square of sensitivities (estimated in section 2.1) from 12 channels 
I = abs(bart('rss 8',calib.*calib));
I  = 1./sqrt(I);
_make_figures("/tmp/tmpu2sahinh", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpgwutri3m", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpkfava87a", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(I))
_make_figures("/tmp/tmprowehhtn", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpba1fur09", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(I))
_make_figures("/tmp/tmp2hm41n5i", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpe_2yg_ea", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpctvscjw2", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(I))
_make_figures("/tmp/tmpu8ojt0gy", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp3t69dq__", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(I))
_make_figures("/tmp/tmptogs9261", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp0ndotq43", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,3);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmpu2q7wptk", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp93qq0i9b", "png", "Figure", -1, -1, 0, 0)
# Root sum of square of sensitivities (estimated in section 2.1) from 12 channels 
I = abs(bart('rss 8',calib.*calib));
_make_figures("/tmp/tmpdaa739es", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpez9e8bfe", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpdn1j0d97", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(I))
_make_figures("/tmp/tmpazgjdlsn", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp86nnm1t2", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(I))
_make_figures("/tmp/tmp4eur884j", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmppuym71f7", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,3);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmp71h_qzxl", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_ybc3ddh", "png", "Figure", -1, -1, 0, 0)
imagesc(im)
_make_figures("/tmp/tmp_6krl632", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp54wbgb57", "png", "Figure", -1, -1, 0, 0)
imagesc(im./I)
_make_figures("/tmp/tmp5txy63ng", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpglf_pzdl", "png", "Figure", -1, -1, 0, 0)
imagesc(im.*I)
_make_figures("/tmp/tmpehx5tbek", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpsp1h8stx", "png", "Figure", -1, -1, 0, 0)
imagesc(im..I)
_make_figures("/tmp/tmpannutdsf", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_8q3z3m9", "png", "Figure", -1, -1, 0, 0)
imagesc(im/I)
_make_figures("/tmp/tmpur47gmoi", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpdx9fkdng", "png", "Figure", -1, -1, 0, 0)
imagesc(im./I)
_make_figures("/tmp/tmpvb_r6d90", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp2umbr74w", "png", "Figure", -1, -1, 0, 0)
function out = opF(im,beta,r)
    
    ks = 1/sqrt(numel(im))*fftshift(fftn(ifftshift(im)));
    
    dim = size(ks);
    center = (dim + 1)/2;
    [x,y] = meshgrid(-(center(2)-1):(dim(2)-center(2)),-(center(1)-1):(dim(1)-center(1)));
    kRadius = sqrt(x.^2 + y.^2);
    f_k = 0.5 + 1/pi.*atan(beta.*((r-kRadius)/r)); 
    out = abs(sqrt(numel(ks.*f_k))*fftshift(ifftn(ifftshift(ks.*f_k))));
end
_make_figures("/tmp/tmptei__emb", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp6xld6hza", "png", "Figure", -1, -1, 0, 0)
im4 = opF(im./I,100,50);
imagesc(im4)
_make_figures("/tmp/tmpqy20_h3j", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp3_q3e4hm", "png", "Figure", -1, -1, 0, 0)
im4 = opF(im,100,50);
imagesc(im4)
_make_figures("/tmp/tmpv8_8snpw", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp0hil1u25", "png", "Figure", -1, -1, 0, 0)
im4 = opF(im,100,60);
imagesc(im4)
_make_figures("/tmp/tmpj98btwr_", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpim1re8k5", "png", "Figure", -1, -1, 0, 0)
im4 = opF(im,100,60);
imagesc(abs(im4)
_make_figures("/tmp/tmpuklppw6w", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpe7sttbvu", "png", "Figure", -1, -1, 0, 0)
im4 = opF(im,100,60);
imagesc(abs(im4))
_make_figures("/tmp/tmpw9tvrqgr", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpz85hltj9", "png", "Figure", -1, -1, 0, 0)
im4 = opF(im,100,60);
imagesc(im4.*I)
_make_figures("/tmp/tmp140cbleq", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp42z6quzm", "png", "Figure", -1, -1, 0, 0)
im4 = opF(im,100,60);
imagesc(im4./I)
_make_figures("/tmp/tmpwpdwqqak", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpgesvqhba", "png", "Figure", -1, -1, 0, 0)
im4 = opF(im,100,60);
imagesc(im4./abs(I)
_make_figures("/tmp/tmpze5sggub", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp89y36a3_", "png", "Figure", -1, -1, 0, 0)
im4 = opF(im,100,60);
imagesc(im4./abs(I))
_make_figures("/tmp/tmpz4mxjepn", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpgf8luw8l", "png", "Figure", -1, -1, 0, 0)
im4 = opF(im,100,60);
imagesc(abs(im4)./abs(I))
_make_figures("/tmp/tmp_p043rqb", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp5u75m28s", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
im4 = opF(ima,100,60);
_make_figures("/tmp/tmpk_8kjdfx", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpjbepw2x1", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
im4 = opF(ima,100,60);
imagesc(im4)
_make_figures("/tmp/tmp5z745wn6", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmphwhx_frh", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
im4 = opF(ima,100,60);
imagesc(abs(im4))
_make_figures("/tmp/tmpsbaiq6yp", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp4l3_ml_4", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
im4 = opF(ima,100,40);
imagesc(abs(im4))
_make_figures("/tmp/tmpidccb30m", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmprbme7g63", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
im4 = opF(ima,100,30);
imagesc(abs(im4))
_make_figures("/tmp/tmp_v_340ev", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpv44pc89p", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
imagesc(ima)
im4 = opF(ima,100,30);
imagesc(abs(im4))
_make_figures("/tmp/tmpcu2ktvhh", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpo958nk25", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
imagesc(abs(ima))
im4 = opF(ima,100,30);
imagesc(abs(im4))
_make_figures("/tmp/tmps22fgicm", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmptem0uc9a", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
imagesc(abs(im))
im4 = opF(ima,100,30);
imagesc(abs(im4))
_make_figures("/tmp/tmp7029xq2u", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp8ea4z5wo", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
imagesc(abs(im))
im4 = opF(ima,100,30);
_make_figures("/tmp/tmpqen02zn3", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp7qdc2xu4", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
imagesc(abs(ima))
im4 = opF(ima,100,30);
_make_figures("/tmp/tmp05i9nyxy", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpfnvf4anl", "png", "Figure", -1, -1, 0, 0)
function out = opF(im,beta,r)
    
    ks = 1/sqrt(numel(im))*fftshift(fftn(ifftshift(im)));
    
    dim = size(ks);
    center = (dim + 1)/2;
    [x,y] = meshgrid(-(center(2)-1):(dim(2)-center(2)),-(center(1)-1):(dim(1)-center(1)));
    kRadius = sqrt(x.^2 + y.^2);
    f_k = 0.5 + 1/pi.*atan(beta.*((r-kRadius)/r)); 
    out = sqrt(numel(ks.*f_k))*fftshift(ifftn(ifftshift(ks.*f_k)));
end
_make_figures("/tmp/tmp0b_amaet", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpgcgeh9md", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
imagesc(abs(ima))
im4 = opF(ima,100,30);
_make_figures("/tmp/tmps0ktda59", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmphlhkrcao", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
imagesc(abs(ima))
im4 = opF(ima,100,30);
imagesc(im4)
_make_figures("/tmp/tmp7gscp528", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_s17_spb", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
imagesc(abs(ima))
im4 = opF(ima,100,30);
imagesc(abs(im4))
_make_figures("/tmp/tmpq0ytzlvf", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpfg4ekot6", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
imagesc(abs(ima))
im4 = opF(ima,100,30);
imagesc(real(im4))
_make_figures("/tmp/tmpzjn70t6b", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpqpldvduk", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
imagesc(ima)
im4 = opF(ima,100,30);
imagesc(real(im4))
_make_figures("/tmp/tmpj96ln3fz", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpd0e29fgs", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
imagesc(real(ima))
im4 = opF(ima,100,30);
imagesc(real(im4))
_make_figures("/tmp/tmp17v7m345", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpvs2q7zj2", "png", "Figure", -1, -1, 0, 0)
ima = im./I;
imagesc(real(ima))
im4 = opF(ima,100,30);
_make_figures("/tmp/tmpeerr9_i8", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpk9pk_y77", "png", "Figure", -1, -1, 0, 0)
ima = real(im./I);
imagesc(real(ima))
im4 = opF(ima,100,30);
_make_figures("/tmp/tmpuy6x1bl8", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpss9inak9", "png", "Figure", -1, -1, 0, 0)
ima = real(im./I);
imagesc(real(ima))
im4 = opF(ima,100,30);
imagesc(im4))
_make_figures("/tmp/tmppuv1_8i6", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpxou0bjii", "png", "Figure", -1, -1, 0, 0)
ima = real(im./I);
imagesc(real(ima))
im4 = opF(ima,100,30);
imagesc((im4))
_make_figures("/tmp/tmpjzp0uz9z", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmphs5stiuq", "png", "Figure", -1, -1, 0, 0)
ima = real(im./I);
imagesc(real(ima))
im4 = opF(ima,100,30);
imagesc(abs(im4))
_make_figures("/tmp/tmprmt88haz", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpom_k25yc", "png", "Figure", -1, -1, 0, 0)
ima = real(im./I);
imagesc(real(ima))
im4 = opF(ima,100,30);
imagesc(real(im4))
_make_figures("/tmp/tmp7pc224q0", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpeqnx906u", "png", "Figure", -1, -1, 0, 0)
% Perform NUFFT to interpolate data onto cartesian grid. 
% -d denotes dimension (x:y:z, which is 300X300X1)
% -i sets the transform type to inverse
% -l enables L2 regularization  
% -t enables Toeplitz embedding
%  trajectory is the k-space locations of the acquired samples
%  rawdata is the sampled raw data
#im = bart('nufft -d300:300:1 -i -l -t',trajectory,rawdata);
im = bart('nufft -d300:300:1 -a -t',trajectory,rawdata);
% Transform sensitivity maps to cartesian k-space using FFT
% -u denotes unitary transform
% 7 sets the bitmask level
im_ks = bart('fft -u 7', im);
% For details regarding BART's ECALIB, please see the implementation notes section.
calib = bart('ecalib -m1 -I',im_ks);
_make_figures("/tmp/tmpf_8fmove", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpzdae6777", "png", "Figure", -1, -1, 0, 0)
# Root sum of square of sensitivities (estimated in section 2.1) from 12 channels 
I = abs(bart('rss 8',calib.*calib));
_make_figures("/tmp/tmpqte70z14", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpyrar33c_", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp66ecqthp", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(I))
_make_figures("/tmp/tmpf6c0fyhm", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_jhsfewf", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(I))
_make_figures("/tmp/tmpuc_n0rcn", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpph12j5xd", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,3);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmpzbxs_tyn", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpqajkpgjr", "png", "Figure", -1, -1, 0, 0)
ima = real(im./I);
imagesc(real(ima))
#im4 = opF(ima,100,30);
#imagesc(real(im4))
_make_figures("/tmp/tmp7_ce29wf", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp_qe0tzfl", "png", "Figure", -1, -1, 0, 0)
ima = real(im.*I);
imagesc(real(ima))
#im4 = opF(ima,100,30);
#imagesc(real(im4))
_make_figures("/tmp/tmpmoc6_n8i", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpe4436sjq", "png", "Figure", -1, -1, 0, 0)
ima = real(im./I);
imagesc(real(ima))
#im4 = opF(ima,100,30);
#imagesc(real(im4))
_make_figures("/tmp/tmpwuztepmk", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmprj4lzvtn", "png", "Figure", -1, -1, 0, 0)
ima = real(im./I);
imagesc(real(ima))
im4 = opF(ima,100,30);
imagesc(real(im4))
_make_figures("/tmp/tmprpd866a_", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpfxlngbxv", "png", "Figure", -1, -1, 0, 0)
ima = real(im./I);
imagesc(real(ima))
im4 = opF(ima,100,60);
imagesc(real(im4))
_make_figures("/tmp/tmpbjqv8ea4", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpihswi7_f", "png", "Figure", -1, -1, 0, 0)
% Perform NUFFT to interpolate data onto cartesian grid. 
% -d denotes dimension (x:y:z, which is 300X300X1)
% -i sets the transform type to inverse
% -l enables L2 regularization  
% -t enables Toeplitz embedding
%  trajectory is the k-space locations of the acquired samples
%  rawdata is the sampled raw data
dcf = abs(trajectory(1,:,:) + 1i*trajectory(2,:,:));
dcf = dcf/max(dcf(:));
#im = bart('nufft -d300:300:1 -i -l -t',trajectory,rawdata);
im = bart('nufft -d300:300:1 -a -t',dcf.*trajectory,rawdata);
% Transform sensitivity maps to cartesian k-space using FFT
% -u denotes unitary transform
% 7 sets the bitmask level
im_ks = bart('fft -u 7', im);
% For details regarding BART's ECALIB, please see the implementation notes section.
calib = bart('ecalib -m1 -I',im_ks);
_make_figures("/tmp/tmphlu1xj8c", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp0nvlgfqf", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpb_6cng77", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(I))
_make_figures("/tmp/tmpbgkdgrql", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmph0cjal5t", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(I))
_make_figures("/tmp/tmps40uo7j3", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpvwwn65lc", "png", "Figure", -1, -1, 0, 0)
# Root sum of square of sensitivities (estimated in section 2.1) from 12 channels 
I = abs(bart('rss 8',calib.*conj(calib)));
I = sqrt(I).^(-1);
_make_figures("/tmp/tmpmpkdtr02", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp626_ip4g", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpbetgo_5y", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(I))
_make_figures("/tmp/tmpvhqdvot3", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpx220v3ya", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(I))
_make_figures("/tmp/tmpm36uhx70", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpn1hojxc2", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,3);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmp0hpr3mf0", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp6nz0w9pc", "png", "Figure", -1, -1, 0, 0)
ima = real(im.*I);
imagesc(real(ima))
im4 = opF(ima,100,60);
imagesc(real(im4))
_make_figures("/tmp/tmpjs_05_z2", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpva8ilx14", "png", "Figure", -1, -1, 0, 0)
ima = real(im.*I);
imagesc(real(ima))
im4 = opF(ima,100,40);
imagesc(real(im4))
_make_figures("/tmp/tmpb6x7twpp", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpbc_7rosp", "png", "Figure", -1, -1, 0, 0)
ima = real(im.*I);
imagesc(real(ima))
im4 = opF(ima,100,50);
imagesc(real(im4))
_make_figures("/tmp/tmpxa8t6fc7", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpt4wzfqcz", "png", "Figure", -1, -1, 0, 0)
[im,deltas] = main_sense(rawdata, calib, trajectory,I,dcf,10);
#[im_x2,deltas_x2] = main_sense(outRD_x2, calib, outTR_x2,I,dcf(:,:,1:2:end),10);
#[im_x3,deltas_x3] = main_sense(outRD_x3, calib, outTR_x3,I,dcf(:,:,1:3:end),10);
#[im_x4,deltas_x4] = main_sense(outRD_x4, calib, outTR_x4,I,dcf(:,:,1:4:end),10);
_make_figures("/tmp/tmpzpcdhfxm", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpqadire8n", "png", "Figure", -1, -1, 0, 0)
ima = real(im.*I);
imagesc(real(ima))
im4 = opF(ima,100,50);
imagesc(real(im4))
_make_figures("/tmp/tmporxzbsfk", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpdfwlxuxr", "png", "Figure", -1, -1, 0, 0)
ima = real(im.*I);
imagesc(real(ima))
im4 = opF(ima,100,40);
imagesc(real(im4))
_make_figures("/tmp/tmpnzxyplxd", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmplu0uysq9", "png", "Figure", -1, -1, 0, 0)
ima = real(im.*I);
imagesc(real(ima))
im4 = opF(ima,100,60);
imagesc(real(im4))
_make_figures("/tmp/tmp_bfe8_7s", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmps_nunyia", "png", "Figure", -1, -1, 0, 0)
ima = real(im.*I);
imagesc(real(ima))
im4 = opF(ima,100,70);
imagesc(real(im4))
_make_figures("/tmp/tmp8xg96n1w", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp3ng9tt3i", "png", "Figure", -1, -1, 0, 0)
ima = real(im.*I);
imagesc(real(ima))
im4 = opF(ima,100,70);
#imagesc(real(im4))
_make_figures("/tmp/tmpv7z7rvf3", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpgl3ho204", "png", "Figure", -1, -1, 0, 0)
ima = real(im.*I);
imagesc(abs((ima)));
im4 = opF(ima,100,70);
#imagesc(real(im4))
_make_figures("/tmp/tmpnvzzqkqb", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpimf9d1nt", "png", "Figure", -1, -1, 0, 0)
ima = real(im);
imagesc(abs((ima)));
im4 = opF(ima,100,70);
#imagesc(real(im4))
_make_figures("/tmp/tmpgk3huymz", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpj6qe7lkt", "png", "Figure", -1, -1, 0, 0)
ima = abs(im);
imagesc(abs((ima)));
im4 = opF(ima,100,70);
#imagesc(real(im4))
_make_figures("/tmp/tmpeb7k1_38", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpqs0lvyd5", "png", "Figure", -1, -1, 0, 0)
ima = abs(im./I);
imagesc(abs((ima)));
im4 = opF(ima,100,70);
#imagesc(real(im4))
_make_figures("/tmp/tmpkju65zul", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpv64gax7p", "png", "Figure", -1, -1, 0, 0)
imshow(abs(im))
_make_figures("/tmp/tmplabexgvk", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpj4e6ftc1", "png", "Figure", -1, -1, 0, 0)
imshow(abs(im),[])
_make_figures("/tmp/tmpr_a52xpm", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmprqsisu_3", "png", "Figure", -1, -1, 0, 0)
imshow(abs(im),[0 100])
_make_figures("/tmp/tmpj5subigd", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpgiukf_cd", "png", "Figure", -1, -1, 0, 0)
imshow(abs(im),[2 100])
_make_figures("/tmp/tmp63dgv3en", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpq8lrlhy5", "png", "Figure", -1, -1, 0, 0)
imshow(abs(im),[10 100])
_make_figures("/tmp/tmpm1g44kf9", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpns407tnu", "png", "Figure", -1, -1, 0, 0)
imshow(abs(im),[50 100])
_make_figures("/tmp/tmp9icdmzss", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpj1r3xuga", "png", "Figure", -1, -1, 0, 0)
imshow(abs(im),[70 100])
_make_figures("/tmp/tmpyp142n5n", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpzhd1cyt0", "png", "Figure", -1, -1, 0, 0)
% Perform NUFFT to interpolate data onto cartesian grid. 
% -d denotes dimension (x:y:z, which is 300X300X1)
% -i sets the transform type to inverse
% -l enables L2 regularization  
% -t enables Toeplitz embedding
%  trajectory is the k-space locations of the acquired samples
%  rawdata is the sampled raw data
#im = bart('nufft -d300:300:1 -i -l -t',trajectory,rawdata);
im = bart('nufft -d300:300:1 -a -t -l',trajectory,rawdata);
% Transform sensitivity maps to cartesian k-space using FFT
% -u denotes unitary transform
% 7 sets the bitmask level
im_ks = bart('fft -u 7', im);
% For details regarding BART's ECALIB, please see the implementation notes section.
calib = bart('ecalib -m1 -I',im_ks);
_make_figures("/tmp/tmp5hi4ewne", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp7hgflbqp", "png", "Figure", -1, -1, 0, 0)
% Perform NUFFT to interpolate data onto cartesian grid. 
% -d denotes dimension (x:y:z, which is 300X300X1)
% -i sets the transform type to inverse
% -l enables L2 regularization  
% -t enables Toeplitz embedding
%  trajectory is the k-space locations of the acquired samples
%  rawdata is the sampled raw data
#im = bart('nufft -d300:300:1 -i -l -t',trajectory,rawdata);
im = bart('nufft -d300:300:1 -a -t -r',trajectory,rawdata);
% Transform sensitivity maps to cartesian k-space using FFT
% -u denotes unitary transform
% 7 sets the bitmask level
im_ks = bart('fft -u 7', im);
% For details regarding BART's ECALIB, please see the implementation notes section.
calib = bart('ecalib -m1 -I',im_ks);
_make_figures("/tmp/tmp336rzhjo", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmp3pahawnq", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpxh_rrkrh", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(calib))
_make_figures("/tmp/tmp5zf0nleq", "png", "Figure", -1, -1, 0, 0)
who('sos*')
_make_figures("/tmp/tmpp96f8483", "png", "Figure", -1, -1, 0, 0)
display(sos_py_repr(calib))
_make_figures("/tmp/tmpgs8f_dto", "png", "Figure", -1, -1, 0, 0)
# Octave 4.2.2, Mon Sep 16 04:14:02 2019 UTC <jovyan@2fe52cfb110c>
